/*
 * Copyright 2016 Carter Yagemann.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.carteryagemann.AICSInspector;

import com.carteryagemann.AICS.AICSFile;
import com.carteryagemann.AICS.ActivityIntentHeader;
import com.carteryagemann.AICS.BroadcastIntentHeader;
import com.carteryagemann.AICS.IntentData;
import com.carteryagemann.AICS.IntentHeader;
import com.carteryagemann.AICS.ServiceIntentHeader;
import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Carter Yagemann
 */
public class InspectionWindow extends javax.swing.JFrame {

    private AICSFile AICS_FILE;
    
    /**
     * Creates new form InspectionWindow
     */
    public InspectionWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        topToolBar = new javax.swing.JToolBar();
        loadButton = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox<>();
        filterButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        packetList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailedList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusPane = new javax.swing.JTextPane();

        openFileChooser.setCurrentDirectory(new java.io.File("/home/carter/~"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AICS Inspector");
        setMinimumSize(new java.awt.Dimension(600, 300));
        setPreferredSize(new java.awt.Dimension(1000, 1000));

        topToolBar.setFloatable(false);

        loadButton.setText("Load File");
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
        });
        topToolBar.add(loadButton);

        typeComboBox.setMaximumRowCount(4);
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Activity", "Broadcast", "Service" }));
        typeComboBox.setToolTipText("Select the type of intents to show.");
        topToolBar.add(typeComboBox);

        filterButton.setText("Filter");
        filterButton.setFocusable(false);
        filterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterButtonMouseClicked(evt);
            }
        });
        topToolBar.add(filterButton);

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        packetList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        packetList.setToolTipText("Select packet to show details.");
        packetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                packetListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(packetList);

        jSplitPane1.setTopComponent(jScrollPane1);

        detailedList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(detailedList);

        jSplitPane1.setRightComponent(jScrollPane2);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        statusPane.setEditable(false);
        statusPane.setEnabled(false);
        statusPane.setFocusable(false);
        jScrollPane3.setViewportView(statusPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
            .addComponent(jSplitPane1)
            .addComponent(jScrollPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
        if(openFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            // Convert file to byte buffer
            File file = openFileChooser.getSelectedFile();
            ByteBuffer buffer = null;
            try {
                FileInputStream fis = new FileInputStream(file);
                FileChannel channel = fis.getChannel();
                buffer = ByteBuffer.allocate((int) channel.size());
                channel.read(buffer);
                buffer.rewind();
                channel.close();
                fis.close();
            } catch (Exception e) {
                System.err.println("Failed to load file: " + e.toString());
                return;
            }
            // Parse file into AICS file
            try {
                AICS_FILE = AICSFile.readFromBuffer(buffer);
            } catch (Exception e) {
                System.err.println("Failed to parse file: " + e.toString());
                return;
            }
            // Create elements for top list
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < AICS_FILE.size(); i++) {
                IntentHeader head = AICS_FILE.getIntent(i);
                switch(head.getIntentType()) {
                    case IntentHeader.TYPE_ACTIVITY:
                        ActivityIntentHeader aHead = (ActivityIntentHeader) head;
                        model.addElement("Activity - " + aHead.getCallerComponent());
                        break;
                    case IntentHeader.TYPE_BROADCAST:
                        BroadcastIntentHeader bHead = (BroadcastIntentHeader) head;
                        model.addElement("Broadcast - " + bHead.getCallerComponent());
                        break;
                    case IntentHeader.TYPE_SERVICE:
                        ServiceIntentHeader sHead = (ServiceIntentHeader) head;
                        model.addElement("Service - " + sHead.getCallerComponent());
                        break;
                }
            }
            packetList.setModel(model);
            statusPane.setText(file.getAbsolutePath());
            typeComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_loadButtonMouseClicked

    private void packetListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_packetListValueChanged
        if (AICS_FILE == null) return;
        int index = packetList.getSelectedIndex();
        //if (index < 0 || index >= packetList.getMaxSelectionIndex()) return;
        
        int filterType = typeComboBox.getSelectedIndex();
        IntentHeader head = null;
        int counter = -1;
        for (int i = 0; i < AICS_FILE.size(); i++) {
            switch (AICS_FILE.getIntent(i).getIntentType()) {
                case IntentHeader.TYPE_ACTIVITY:
                    if (filterType == 0 || filterType == 1) counter++;
                    break;
                case IntentHeader.TYPE_BROADCAST:
                    if (filterType == 0 || filterType == 2) counter++;
                    break;
                case IntentHeader.TYPE_SERVICE:
                    if (filterType == 0 || filterType == 3) counter++;
                    break;
            }
            if (counter == index) {
                head = AICS_FILE.getIntent(i);
                break;
            }
        }
        if (head == null) return;
        
        DefaultListModel model = new DefaultListModel();
        // Generic Header
        model.addElement("----- HEADER -----");
        model.addElement("Timestamp: " + head.getTimestamp());
        model.addElement("Offset (ms): " + head.getOffset());
        model.addElement("Caller UID: " + head.getCallerUID());
        model.addElement("Caller PID: " + head.getCallerPID());
        model.addElement("Receiver UID: " + head.getReceiverUID());
        model.addElement("Receiver PID: " + head.getReceiverPID());
        model.addElement("UserID: " + head.getUserID());
        // Specific Header
        switch (head.getIntentType()) {
            case IntentHeader.TYPE_ACTIVITY:
                ActivityIntentHeader aHead = (ActivityIntentHeader) head;
                model.addElement("Request Code: " + aHead.getRequestCode());
                model.addElement("Start Flags: " + aHead.getStartFlags());
                model.addElement("Receiver Component: " + aHead.getReceiverComponent());
                model.addElement("Caller Component: " + aHead.getCallerComponent());
                if (aHead.getOptions() != null)
                    model.addElement("Options Bundle: " + DatatypeConverter.printHexBinary(aHead.getOptions()));
                else
                    model.addElement("Options Bundle: null");
                break;
            case IntentHeader.TYPE_BROADCAST:
                BroadcastIntentHeader bHead = (BroadcastIntentHeader) head;
                model.addElement("Request Code: " + bHead.getRequestCode());
                model.addElement("Broadcast Flags: " + bHead.getFlags());
                model.addElement("Receiver Component: " + bHead.getReceiverComponent());
                model.addElement("Caller Component: " + bHead.getCallerComponent());
                model.addElement("Required Permission: " + bHead.getRequiredPermission());
                break;
            case IntentHeader.TYPE_SERVICE:
                ServiceIntentHeader sHead = (ServiceIntentHeader) head;
                model.addElement("Flags: " + sHead.getFlags());
                model.addElement("Receiver Component: " + sHead.getReceiverComponent());
                model.addElement("Caller Component: " + sHead.getCallerComponent());
                model.addElement("Service Action: " + sHead.getAction());
                break;
        }
        // Intent Data
        IntentData intent = head.getIntentData();
        model.addElement("----- INTENT -----");
        model.addElement("Flags: " + intent.getFlags());
        model.addElement("Action: " + intent.getAction());
        model.addElement("Data: " + intent.getData());
        model.addElement("Category: " + intent.getCategory());
        model.addElement("Type: " + intent.getType());
        if (intent.getClipData() != null)
            model.addElement("ClipData: " + DatatypeConverter.printHexBinary(intent.getClipData()));
        else
            model.addElement("ClipData: null");
        if (intent.getExtras() != null)
            model.addElement("Extras: " + DatatypeConverter.printHexBinary(intent.getExtras()));
        else
            model.addElement("Extras: null");
        detailedList.setModel(model);
    }//GEN-LAST:event_packetListValueChanged

    private void filterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterButtonMouseClicked
        if (AICS_FILE != null) {
            int filterType = typeComboBox.getSelectedIndex();
            // Create elements for top list
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < AICS_FILE.size(); i++) {
                IntentHeader head = AICS_FILE.getIntent(i);
                int intentType = head.getIntentType();
                if (intentType == IntentHeader.TYPE_ACTIVITY && (filterType == 0 || filterType == 1)) {
                    ActivityIntentHeader aHead = (ActivityIntentHeader) head;
                    model.addElement("Activity - " + aHead.getCallerComponent());
                }
                if (intentType == IntentHeader.TYPE_BROADCAST && (filterType == 0 || filterType == 2)) {
                    BroadcastIntentHeader bHead = (BroadcastIntentHeader) head;
                    model.addElement("Broadcast - " + bHead.getCallerComponent());
                }
                if (intentType == IntentHeader.TYPE_SERVICE && (filterType == 0 || filterType == 3)) {
                    ServiceIntentHeader sHead = (ServiceIntentHeader) head;
                    model.addElement("Service - " + sHead.getCallerComponent());
                }
            }
            packetList.setModel(model);
        }
    }//GEN-LAST:event_filterButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InspectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InspectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InspectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InspectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InspectionWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> detailedList;
    private javax.swing.JButton filterButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JList<String> packetList;
    private javax.swing.JTextPane statusPane;
    private javax.swing.JToolBar topToolBar;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
